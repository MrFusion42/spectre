#!/usr/bin/env php
<?php

declare(ticks = 1);

error_reporting(-1);
date_default_timezone_set('America/Mexico_City');

call_user_func(function () use ($argv) {
  $vendor_dirs = array(
    getcwd(),
    dirname(__DIR__),
    dirname(dirname(__DIR__)),
    dirname(dirname(dirname(__DIR__))),
  );

  foreach ($vendor_dirs as $path) {
    $vendor_file = join(array($path, 'vendor', 'autoload.php'), DIRECTORY_SEPARATOR);

    if (is_file($vendor_file)) {
      require $vendor_file;
      break;
    }
  }

  $cli = new \Clipper\Shell($argv);

  $cli->params->parse(array(
    'showHelp' => array('h', 'help', \Clipper\Params::PARAM_NO_VALUE),
    'watchMode' => array('w', 'watch', \Clipper\Params::PARAM_NO_VALUE),
    'watchTimeout' => array('t', 'timeout', \Clipper\Params::PARAM_REQUIRED),
    'watchDuration' => array('d', 'duration', \Clipper\Params::PARAM_NO_VALUE),
    'codeCoverage' => array('c', 'coverage', \Clipper\Params::PARAM_NO_VALUE),
    'excludeSources' => array('x', 'exclude', \Clipper\Params::PARAM_MULTIPLE),
    'reportFile' => array('o', 'output', \Clipper\Params::PARAM_REQUIRED),
    'reportOutput' => array('r', 'reporter', \Clipper\Params::PARAM_REQUIRED),
  ));

  \Spectre\Runner::initialize($cli);

  $callback = function () use ($cli) {
    $status = \Spectre\Runner::execute();

    if (!$cli->params['watchMode']) {
      $cli->writeln();
    }

    exit($status);
  };

  if ($cli->params['watchMode']) {
    if (!function_exists('pcntl_fork')) {
      throw new \Exception('PCNTL is required for watch mode but is missing');
    }

    $timeout = !isset($cli->params['watchTimeout']) ? 1000 : ($cli->params['watchTimeout'] < 10 ? $cli->params['watchTimeout'] * 1000 : $cli->params['watchTimeout']);

    $hashes = getcwd() . '/.spectre';

    if (is_file($hashes)) {
      unlink($hashes);
    }

    $kill = function () use ($cli) {
      $cli->quit();
    };

    $cli->main(function ($cli, $ticks, $duration) use ($kill, $hashes, $timeout, $callback) {
      $current_stats = md5(print_r(\Spectre\Runner::watch(), 1));
      $previous_stats = is_file($hashes) ? file_get_contents($hashes) : '';

      if ($previous_stats !== $current_stats) {
        file_put_contents($hashes, $current_stats);

        $child_pid = pcntl_fork();

        if (-1 === $child_pid) {
          throw new \Exception('Could not fork the process');
        } else if ($child_pid) {
          pcntl_wait($status);

          pcntl_signal(SIGTERM, $kill);
          pcntl_signal(SIGHUP, $kill);
          pcntl_signal(SIGINT, $kill);

          $cli->printf("\n<c:light_gray>Press CTRL-C to quit.</c>\n");

          if (!$cli->params['watchDuration']) {
            $cli->printf("\n<c:dark_gray>(waiting for changes...)</c>");
          } else {
            $cli->writeln();
          }
        } else {
          $callback();
        }
      }

      if ($cli->params['watchDuration']) {
        $time = \Spectre\Helpers::secs($duration);

        $cli->printf("\r<c:dark_gray>Watch time: $time (waiting for changes...)</c>");
      }

      usleep($timeout);
    });

    $cli->printf("\r");

    unlink($hashes);
  } else {
    $callback();
  }
});
